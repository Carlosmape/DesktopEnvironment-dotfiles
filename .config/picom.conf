#################################
#          Animations           #
#################################
# requires https://github.com/jonaburg/picom
# (These are also the default values)
transition-length = 400
transition-pow-x = 5
transition-pow-y = 5
transition-pow-w = 5
transition-pow-h = 5
size-transition = true 

#################################
#           Fading              #
#################################
fading = true;
# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.01;
# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.01;
# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 4; 

#################################
#             Corners           #
#################################
# requires: https://github.com/sdhand/compton or https://github.com/jonaburg/picom
#corner-radius = 10.0;
#round-borders = 0;


#################################
#             Shadows           #
#################################
shadow = true 
shadow-radius = 12
shadow-opacity = .75
shadow-offset-x = -10
shadow-offset-y = -10

################################
# OPACITY                      #
################################
# Disable opacity in full screen mode
opacity-rule = 
[
	"100:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_FULLSCREEN'",
	"100:_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_FULLSCREEN'",
	"100:_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_FULLSCREEN'",
	"100:_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_FULLSCREEN'",
	"100:_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_FULLSCREEN'",
];

################################
# BACKGROUND BLUR              #
################################
blur: {
	method = "dual_kawase";
	strength = 100;
}

#################################
#       General Settings        #
#################################
# Daemonize process. Fork to background after initialization. Causes issues with certain (badly-written) drivers.
# daemon = false
experimental-backends = true;
 backend = "glx";
# backend = "xr_glx_hybrid";
vsync = true 

# Try to detect WM windows (a non-override-redirect window with no 
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;

# Mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = true;

# Try to detect windows with rounded corners and don't consider them 
detect-rounded-corners = true;

# Detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = true;

# Specify refresh rate of the screen. If not specified or 0, picom will 
# try detecting this with X RandR extension.
refresh-rate = 0

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows 
# in the same group focused at the same time.
detect-transient = true

# Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same 
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if 
# detect-transient is enabled, too.
detect-client-leader = true

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer. 
# Might cause incorrect opacity when rendering transparent content (but never 
# practically happened) and may not work with blur-background. 
# My tests show a 15% performance boost. Recommended.
# glx-no-stencil = false

# GLX backend: Avoid rebinding pixmap on window damage. 
# Probably could improve performance on rapid window content changes, 
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
# glx-no-rebind-pixmap = false

# Disable the use of damage information. 
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
# no-use-damage = false
#use-damage = true (Causing Weird Black semi opaque rectangles when terminal is opened)
#Changing use-damage to false fixes the problem
use-damage = false

# Use X Sync fence to sync clients' draw calls, to make sure all draw 
# calls are finished before picom starts drawing. Needed on nvidia-drivers 
# with GLX backend for some users.
xrender-sync-fence = true

# Do not use EWMH to detect fullscreen windows. 
# Reverts to checking if a window is fullscreen based only on its size and coordinates.
# no-ewmh-fullscreen = false


# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter. 
# If using the "TRACE" log level, it's better to log into a file 
# using *--log-file*, since it can generate a huge stream of logs.
log-level = "warn";

# Window type settings
# 
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard: 
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility", 
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", 
#     "tooltip", "notification", "combo", and "dnd".
# 
# Following per window-type options are available: ::
# 
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
# 
#   opacity:::
#     Controls default opacity of the window type.
# 
#   focus:::
#     Controls whether the window of this type is to be always considered focused. 
#     (By default, all window types except "normal" and "dialog" has this on.)
# 
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you 
#     normally won't be able to see. Useful when the window has parts of it 
#     transparent, and you want shadows in those areas.
# 
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become 
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection, 
#     you can set this to `true`.
#
wintypes:
{
	normal = { opacity = .9; }
	dialog = { opacity = .9; }
	notification = 	{ opacity = 0.8; corner-radius = 14.0; }
	tooltip = 		{ opacity = 0.8; corner-radius = 14.0; }
  	popup_menu = 	{ opacity = 0.8; corner-radius = 14.0; }
  	dropdown_menu = { opacity = 0.8; corner-radius = 14.0; }
  	dock = { shadow = false; }
};
